import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.2.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
}

group = 'sduseat'
version = '2.0'

java {
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://jitpack.io")
        content {
            includeGroup "com.github"
        }
    }
}

ext {
    versions = [
            kotlin       : '2.2.0',
            okhttp       : '4.12.0',
            gson         : '2.13.1',
            kotlinLogging: '7.0.7',
            slf4j        : '2.0.17',
            jsoup        : '1.21.1',
            rhino        : '1.8.0',

            metrics      : '4.2.33'
    ]
}

// 构建可执行 jar 包，运行依赖jar内容会直接打到 jar 里面
tasks.shadowJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes(
                'Main-Class': 'sduseat.Main',
                'Implementation-Title': 'Sdu-Seat',
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().format("yyyy-MM-dd HH:mm:ss"),
                'Built-JDK': System.getProperty('java.version')
        )
    }
    archiveClassifier = ''

    // 将 build.gradle 打入到 jar 中, 方便查看依赖包版本
    from("./") {
        include 'build.gradle'
        filePermissions {
            user {
                read = true
                write = true
            }
            group {
                read = true
            }
            other {
                read = true
            }
        }
    }

    // 优化：合并服务文件
    mergeServiceFiles()

    // 优化：排除签名文件
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    // 设置文件权限
    preserveFileTimestamps = true
    reproducibleFileOrder = true

    // 设置目录权限
    dirPermissions {
        user {
            read = true
            write = true
            execute = true
        }
        group {
            read = true
            execute = true
        }
        other {
            read = true
            execute = true
        }
    }

    // 设置文件权限
    filePermissions {
        user {
            read = true
            write = true
        }
        group {
            read = true
        }
        other {
            read = true
        }
    }
}

// 配置标准jar任务
tasks.jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest {
        attributes(
                'Main-Class': 'sduseat.Main',
                'Implementation-Title': 'Sdu-Seat',
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().format("yyyy-MM-dd HH:mm:ss"),
                'Built-JDK': System.getProperty('java.version')
        )
    }


}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"



    //Okhttp
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    //gson
    implementation "com.google.code.gson:gson:${versions.gson}"
    //logger
    implementation "io.github.oshai:kotlin-logging:${versions.kotlinLogging}"
    implementation "org.slf4j:slf4j-log4j12:${versions.slf4j}"
    //Jsoup
    implementation "org.jsoup:jsoup:${versions.jsoup}"
    //rhino
    implementation "org.mozilla:rhino:${versions.rhino}"
    implementation "org.mozilla:rhino-engine:${versions.rhino}"

    // Metrics
    implementation "io.dropwizard.metrics:metrics-core:${versions.metrics}"
    implementation "io.dropwizard.metrics:metrics-jvm:${versions.metrics}"

    // Email
    implementation "com.sun.mail:jakarta.mail:2.0.1"

    // QR Code generation
    implementation "com.google.zxing:core:3.5.3"
    implementation "com.google.zxing:javase:3.5.3"
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_24
        freeCompilerArgs.addAll(['-Xjsr305=strict'])
    }
}



// 添加源代码编码设置
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// 添加Javadoc编码设置
tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}