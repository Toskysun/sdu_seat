name: Release Packages

on:
  push:
    tags:
      - 'v*'  # 当推送带v前缀的标签时触发
  workflow_dispatch:  # 允许手动触发工作流
    inputs:
      custom_tag:
        description: '自定义标签名称 (例如: v1.0.0)'
        required: false
        type: string

jobs:
  build-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 浅克隆，只获取最新提交
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: gradle  # 启用Gradle缓存

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.14.2'
          cache-read-only: false
          cache-write-only: false
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"
      
      - name: Set release version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            if [[ -n "${{ github.event.inputs.custom_tag }}" ]]; then
              echo "RELEASE_VERSION=${{ github.event.inputs.custom_tag }}" >> $GITHUB_ENV
              echo "CUSTOM_TAG=${{ github.event.inputs.custom_tag }}" >> $GITHUB_ENV
            else
              echo "RELEASE_VERSION=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
            fi
          fi
      
      - name: Update project version with tag
        run: |
          # 从 RELEASE_VERSION 中移除 'v' 前缀（如果存在）
          VERSION="${RELEASE_VERSION#v}"
          # 使用 sed 更新 build.gradle 中的版本号
          sed -i "s/^version = .*/version = '$VERSION'/g" build.gradle
          # 更新 banner.txt 中的版本号
          sed -i "s/:: Sdu-Seat v[0-9.]\+ ::/:: Sdu-Seat v$VERSION ::/g" src/main/resources/banner.txt
          echo "已将项目版本号更新为: $VERSION"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew shadowJar --build-cache --parallel --configuration-cache
      
      - name: Create All Release Packages
        run: |
          # 创建目录结构
          mkdir -p release/{windows,linux,macos,config}

          # 并行创建所有平台包
          {
            # Windows包
            cp build/libs/sdu-seat-*.jar release/windows/
            cp README.md LICENSE config/config.example.json release/windows/ 2>/dev/null || true
            mv release/windows/config.example.json release/windows/config.json 2>/dev/null || true
            cat > release/windows/run.bat << 'EOF'
          @echo off
          for %%i in (sdu-seat-*.jar) do set JAR_FILE=%%i
          echo Using JAR file: %JAR_FILE%
          java -jar %JAR_FILE% %*
          pause
          EOF
            cd release && zip -9 -r Sdu-Seat-Windows-${RELEASE_VERSION}.zip windows/ && cd ..
          } &

          {
            # Linux包
            cp build/libs/sdu-seat-*.jar release/linux/
            cp README.md LICENSE config/config.example.json release/linux/ 2>/dev/null || true
            mv release/linux/config.example.json release/linux/config.json 2>/dev/null || true
            cat > release/linux/run.sh << 'EOF'
          #!/bin/bash
          JAR_FILE=$(ls sdu-seat-*.jar)
          echo "Using JAR file: $JAR_FILE"
          java -jar "$JAR_FILE" "$@"
          EOF
            chmod +x release/linux/run.sh
            cd release && tar -czf Sdu-Seat-Linux-${RELEASE_VERSION}.tar.gz linux/ && cd ..
          } &

          {
            # macOS包
            cp build/libs/sdu-seat-*.jar release/macos/
            cp README.md LICENSE config/config.example.json release/macos/ 2>/dev/null || true
            mv release/macos/config.example.json release/macos/config.json 2>/dev/null || true
            cat > release/macos/run.sh << 'EOF'
          #!/bin/bash
          JAR_FILE=$(ls sdu-seat-*.jar)
          echo "Using JAR file: $JAR_FILE"
          java -jar "$JAR_FILE" "$@"
          EOF
            chmod +x release/macos/run.sh
            cd release && tar -czf Sdu-Seat-macOS-${RELEASE_VERSION}.tar.gz macos/ && cd ..
          } &

          {
            # 配置示例包
            cp config/config.example.json release/config/
            cd release && zip -9 -r Sdu-Seat-Config-Example-${RELEASE_VERSION}.zip config/ && cd ..
          } &

          # 等待所有后台任务完成
          wait
      
      - name: Create tag for non-tag builds
        if: ${{ !startsWith(github.ref, 'refs/tags/') && github.event.inputs.custom_tag == '' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "release-${RELEASE_VERSION}"
          git push origin "release-${RELEASE_VERSION}"
      
      - name: Create custom tag
        if: ${{ !startsWith(github.ref, 'refs/tags/') && github.event.inputs.custom_tag != '' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ env.CUSTOM_TAG }}"
          git push origin "${{ env.CUSTOM_TAG }}"
      
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && env.RELEASE_VERSION || (github.event.inputs.custom_tag != '' && env.CUSTOM_TAG || format('release-{0}', env.RELEASE_VERSION)) }}
          name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') && github.event.inputs.custom_tag == '' }}
          files: |
            release/*.zip
            release/*.tar.gz
          generate_release_notes: true
          make_latest: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}